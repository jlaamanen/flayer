name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [master]
  release:
    types: [released]

env:
  NODE_VERSION: 20
  E2E_BASE_IMAGE: ghcr.io/${{ github.repository }}:latest

jobs:
  # Test and build all PRs, pushes to master and releases
  test-and-build:
    name: Test & build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci
      - run: npm test
      - run: npm run build
      # Cache built files for the publish job
      - uses: actions/cache@v3
        with:
          path: |
            dist
            client-lib
          key: ${{ github.sha }}

  # Pre-build base image for E2E tests (with npm linked Flayer)
  build-e2e-base-image:
    name: Build E2E base image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push base image to registry
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.E2E_BASE_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Run the E2E tests
  run-e2e-tests:
    name: Run E2E tests
    runs-on: ubuntu-latest
    needs: [build-e2e-base-image]
    strategy:
      matrix:
        directory: ["01-crud-with-auth", "02-sveltekit"]
    defaults:
      run:
        working-directory: examples/${{ matrix.directory }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./examples/${{ matrix.directory }}/package-lock.json
      # Install packages
      - run: npm ci
      # Try to get the Playwright browsers from cache
      - name: Get installed Playwright version
        id: playwright-version
        run: echo "version=$(npm ls @playwright/test --json | jq --raw-output '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      # Install Playwright browsers unless found from the cache
      - name: Install Playwright browsers and OS dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
      # If Playwright browsers were found from cache, only install OS dependencies
      # TODO: this should also be cached somehow
      - name: Install Playwright OS dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps
      # Start the stack up and run tests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Start up the example
        run: BASE_IMAGE=${{ env.E2E_BASE_IMAGE }} docker compose up -d --wait
        timeout-minutes: 5
      - run: docker compose logs
        if: failure()
      - run: npm test
      # Upload test results if it failed
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-report-${{ matrix.directory }}
          # The action doesn't respect the working directory: https://github.com/actions/upload-artifact/issues/232
          path: examples/${{ matrix.directory }}/playwright-report/
          retention-days: 30

  # Publish the package to NPM on release
  publish:
    name: Publish
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    needs: [test-and-build, run-e2e-tests]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          registry-url: "https://registry.npmjs.org"
      # Restore built files from cache
      - uses: actions/cache@v3
        with:
          path: |
            dist
            client-lib
          key: ${{ github.sha }}
      # Update release version from the tag name (don't let NPM create new tags)
      - run: npm version --no-git-tag-version ${{ github.event.release.tag_name }}
      # Publish the package
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      # After publish, update all Flayer versions used in the examples
      - name: Update Flayer version to examples
        run: |
          # Navigate to the examples directory
          cd examples

          # Use a find command to loop through all package.json files
          find . -name 'package.json' | while read -r package_file; do
            # Check if the package "flayer" exists in the current package.json
            if grep -q "\"flayer\":" "$package_file"; then
              # Navigate to the directory containing the package.json
              dir=$(dirname "$package_file")
              cd "$dir"

              # Run the npm install command for flayer with the target version
              npm install flayer@"${{ github.event.release.tag_name }}"

              # Navigate back to the root examples directory for the next iteration
              cd -
            fi
          done
      # After a successful publish, commit the new version to the repository (will not trigger new workflows!)
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Release ${{ github.event.release.tag_name }}
          branch: master
